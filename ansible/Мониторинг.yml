Введение в мониторинг. Модели и принципы работы систем мониторинга 

План:
	-три пути DevOps
	-мониторинг 
	-практики построения мониторинга и антипаттерны 
	-модели мониторинга 
	-метрики 
	-системы мониторина 
	-прометеус
	
Три пути DevOps:
    Первый путь: 
        Бизнес и пользователи > Быстрый поток изменений > Продукт
        Как можно меньше затрачено времени на реализацию
    Второй путь:
        Обеспечить быструю обратную связь справа на лево
        Это фидбэк от пользователя 
        Это фидбэк от бизнеса 
        Мониторинг нашего продукта
        Мониторинг нашего пайпайна 
            Позволяет реагировать на значимые события 
            Повышается скорость обучения внутри организации 
            Повышает качество продукта 
        Примеры:
        -мониторинг окружения и работы приложения 
        -мониторинг поведения пользователей 
        -автоматизация сборки кода и  прогона тестов (метрики по сборкам и т.п., чё упало и т.п.)
        -ChatOps
    Третий путь:
        Создание культуры постоянного эксперимента и обучения внутри организации 
        Когда мы стабильны и продвинуты, можно экспериментировать
        Высокий уровень зрелости команд и технологий
        
        
Мониторинг, Зачем?:
    Никто не будет пользоваться продуктом, если он:
        -не работает 
        -работает медленно 
        -работает с ошибками
       Надёжность работы становится залогом его успеха.
    
Анализ поведения пользователей:
    Без анализа поведения:
        -нельзя понять насколько успещна бизнес идея 
        -нет понимания потребностей пользователей 
    На рынке выигрывает тот кто умеет понимать потребности пользователей и реализовывать их 
    в кратчайшие сроки 
    Можно определить например сколько место потребляется - когда нам потребуется расширяться
    
Что мониторить?:
    -инфраструктура
    -работа и состояние поддерживающих сервисов 
    -процесс деплоя 
    -работа и состояние приложения 
    -бизнес метрики и поведения пользователя 
    Та же система мониторинга должна быть под мониторингом.
    
Мониторинг как сервисы:
    -собственный сервис (Zabbix, Prom)
    -SaaS (New Relic, Datadog, okmeter.io)
    -outsource (ITSumma и другие)
   Должен удовлетворять потребности своих клиентов 
    -dev
    -ops
    -business
    
Антипаттерны:
    -одержимость выбором инструментов 
    -специальный отдел мониторинга
        отдельный отдел позволяет подсветить проблему - но отдел не заинтересован
        отдел не знает всех фишек и по сути для галочки 
        отдел не помогает коммуникациям между отделами
        скорее всего у них ручное конфигурирование
    -мониторинг для галочки 
    -использование мониторинга в качестве костыля 
        когда есть реальная проблема, её видно на мониторинге, но никто не устраняет проблему 
    -ручное конфигурирование
        нужен сервис дисковери
        автоматом всё 
        
Хорошие практики:
    мониторинг из многиих компонентов как правило лучше чем один монолот
    мониторинг это не только про оповещения но и про прогнозирование
    построение мониторинга необходимо начинать с пользовательских метрик 
    есть есть возможность - начинать лучше с мониторинга как сервис, чем свой 
    постоянное улучшение всех компонентов 
    
    
Модели мониторинга:
    blackbox мониторинг
        -мониторинг извне с точки зрения пользователя 
        -не видим как рботает система внутри 
        -примеры: проверка открытых портов, подсчёт коннектов, наличие процессов
    
    whitebox
        -мониторинг на основе информации о внутр работе системы 
        -примеры: метрики приложений (время запроса к Бд, кол-во пользователей и т.п.)
        
Модель Push vs Pull:
    Проблемы push:
        -если мониторинговая модель не сможет обработать информацию, мы не сможет увидеть метрики по всем продуктам
    Проблемы pull:
     
Метрики:
    Временный ряд (timeseries)
        набор значений метрик за определённый период времени 
        для хранения временных рядов применяются TSDB
            (TSDBs; InfluxDB, Whisper(Graphite), Promet, Elasticsearch
    Основные типы метрки 
        -шкала (цифровое значение, может менять во времени (CPU, memory, disk, кол-во пользователей онлайн 
        -счётчик (счётчик всегда растёт вверх - не уменьшается. Типо аптайм, кол-во регистраций пользов, число продаж)
        -гистограмма (позволяют оследить длительность операции). Примеры - время ответа веб сервера, длительность запроса БД
        
Системы мониторинга:
    Архитектура 
        инфра + приложение + бизнес логика 
            отправляем метрики и евент логи 
                а именно в процессинговый движёк 
                    сохраняется в базу 
                        есть алёртинг в джижке 
                            в базе есть инструменты виртуализации 
      
      
      
 Занятие № 2
 Мониторинг приложений и инфраструктуры
 
 План:
    -мониторинг инфраструктуры, приложения, бизнес-логики 
    -как выбрать что собирать и анализировать 
    -агрегация и визуализация метрик 
    -язык запросов PromQL 
    -Grafana 
    -Алекртинг, on-call, инциденты
    
Термины:
    среднее 
    медиана (более правильное усреднённого)
    Seasonality (повторяемость) = сколько раз мы встречаем одно и тоже
    Стандартное отклоение = отклоенение от нормы 
    Процентили и квартили = мы берём отрезок и смотрим процент от рассматриваемого нами отрезка
    
Метрики хоста:
    -CPU
    -RAM
    -Processes
    -Disk
    -Network...

    Чем собирать?:
        -Zabbix-Agent
        -Prometheus
       Плагины:
        collectd
        Telegraf (можно прокидывать в prometheus)
        
        NetData
       Сервисы платформы:
        Stackdriver (GCP)
        CloudWatch (AWS)
        
    Метрики Docker-Контейнеров:
        -cpu
        -memory
        -network 
        -block I/O
        + Docker Daemon 
        
        Чем собирать:
            команда docker stats 
            cAdvisor
            NetData 
            Prometheus
    
    Метрики сервисов:
        БД, очереди (оставания реплик)
        Load balancer
        Сервер приложения 
        Сторонние сервисы 
        Всё от чего зависит стабильность работы вашего продукта
        
Мониторинг приложения:
    Health check
        -проверка с целью убедиться, что наше приложение доступно и полноценно работает 
        -возврат кода 200 на странице приложения не означает что оно работает как ожидается 
        -возврат дополнительной информации о работе приложения   
    APM (Application performance management)
        вообще разработчики сами должны писать для 
        например время ответа на запросы 
        количество неудачных логинов пользователей 
    Нужен простой стандарт для создания метрик - общая библиотека 
    Многие системы мониторинга имеют готовые клиентские библиотеки (statsd; Prometheus)
    
        
    Трасировщик логов - Ягер. Вроде он как может мониторить логику. Допустим сайт доступен но не работает регистрация пользователей.
    Прикольно мониторить сколько пользователей сейчас имеют права админов  
    
    Васильев Андрей Валентинович
    михаил коротаев 
    наталья жукова
    